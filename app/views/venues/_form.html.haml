- content_for :scripts do
  = javascript_include_tag "http://maps.google.com/maps/api/js?sensor=false"
  = javascript_include_tag "jquery.ui.addresspicker"
  = javascript_include_tag "contacts"
  = javascript_include_tag "tag"
  = javascript_include_tag "contacts_form"
  = javascript_include_tag "scheduling"

#menu-vertical
  %span
    = link_to t(:cancel), @venue
    ou
  .btn.btn-alert.btn-large.btn-submit{:href => "#"}
    Enregistrer

%h1.page-title Modifier le lieu

= simple_nested_form_for(@venue, :html => { :class => 'form-horizontal form-edit' }) do |venue_form|
  = display_errors(@venue)

  .form-inputs
    %header
      .control-group
        .pic-container
          .pic= image_tag @venue.avatar_url
        = venue_form.fields_for :structure do |s|
          = s.fields_for :contact do |c|
            = c.input :name, label: false, :class => "input-Xlarge"
        = venue_form.input :avatar, label:false, :hint => "L’image doit faire au moins 80x80 pixels."

    .row-fluid
      .span12
        .tabbable
          %ul.nav.nav-tabs
            %li.active
              %a{"data-toggle" => "tab", :href => "#contact-infos"} Coordonnées
            %li
              %a{"data-toggle" => "tab", :href => "#basic-infos"} Infos
            %li
              %a{"data-toggle" => "tab", :href => "#schedulings"} Programmation(s)
            %li
              %a{"data-toggle" => "tab", :href => "#rooms-infos"} Salle(s) du lieu


          .tab-content
            #contact-infos.tab-pane.active
              = venue_form.fields_for :structure do |s|
                = s.fields_for :contact do |c|

                  = c.fields_for :emails do |email|
                    .nested-fields
                      = email.link_to_remove :title => "Remove this email" do
                        %i.entypo.edi-minus2
                      = email.input :address, label:"Email", :wrapper => :append do
                        = email.input_field :address, :label => "Email", :validate => true, :class => "input-xlarge"
                        = email.input_field :classic_kind, :label => "Type", :collection => Email::VENUE_KIND, :class => "add-on btn dropdown-toggle"
                        = email.input_field :specific_kind, :class => "other input-medium"
                  .links
                    = c.link_to_add :emails, :title => 'Add a new email' do
                      %i.entypo.edi-plus2
                      Add a new email

                  = c.fields_for :phones do |phone|
                    .nested-fields
                      = phone.link_to_remove :title => "Remove this phone" do
                        %i.entypo.edi-minus2
                      = phone.input :national_number, :wrapper => :append do
                        = phone.input_field :national_number, :class => "input-medium", :validate => true
                        = phone.input_field :classic_kind, label:false, :collection => Phone::VENUE_KIND, :class => "add-on btn dropdown-toggle"
                        = phone.input_field :specific_kind, :class => "other input-medium"
                  .links
                    = c.link_to_add :phones, :title => 'Ajouter un téléphone' do
                      %i.entypo.edi-plus2
                      Add a new phone

                  .fields-group
                    = c.fields_for :addresses do |address|
                      .nested-fields.addresses
                        = address.link_to_remove :title => "Remove this address" do
                          %i.entypo.edi-minus2

                        = address.input :street, label:"Addresse", :wrapper => :append do
                          = address.input_field :street,:placeholder =>"Addresse",  :label => false, autocomplete: :off, :class => "input-xlarge street"
                          = address.input_field :kind, :label => false, :collection => [:main_address, :admin_address], :selected => "Work", :input_html => { :class => "add-on btn dropdown-toggle" }

                        .control-group.nolabel
                          = address.input_field :city, :label => false, :placeholder =>"Ville, localité, …", :class => " inline city"
                          = address.input_field :postal_code, :label => false, :placeholder =>"Code postal", :class => "input-medium inline postal_code"
                          = address.input_field :country, :label => false, :priority => [ "France", "Spain", "Germany", "Austria", "United States", "United Kingdom" ], :class => "inline"
                        .control-group.nolabel.state.hidden
                          = address.input_field :state, :label => false, :placeholder =>"State", :class => "inline"

                        = address.input :more_info, label:false
                        = address.hidden_field :latitude, class: "latitude"
                        = address.hidden_field :longitude, class: "longitude"

                    .links
                      = c.link_to_add :addresses, :title => 'Add a new address' do
                        %i.entypo.edi-plus2
                        Add a new address


                  = c.fields_for :websites do |website|
                    .nested-fields
                      = website.link_to_remove :title => "Remove this website" do
                        %i.entypo.edi-minus2
                      = website.input :url, wrapper: :append do
                        = website.input_field :url, :class => "input-xlarge"
                        = website.input_field :kind, label:false, :collection => %w(Work Home),  :selected => "Work", :class => "add-on btn dropdown-toggle"

                  .links
                    = c.link_to_add :websites, :title => 'Add a new website' do
                      %i.entypo.edi-plus2
                      Add a new website

            #basic-infos.tab-pane

              = venue_form.input :kind, :collection => Venue::VENUE_KINDS, :as => :radio_buttons, item_wrapper_class: "inline"

              %label.control-label Services
              = venue_form.input :residency, wrapper: :edgar_checkbox
              = venue_form.input :accompaniment, wrapper: :edgar_checkbox


              = venue_form.fields_for :structure do |s|
                = s.fields_for :contact do |c|

                  = c.input :network_tags, label: "Réseaux <br><span class='help-block'>(séparés par des virgules)</span>".html_safe, :input_html => { :class => "span12 network_tags_input", :placeholder =>"…", data: {autocomplete_source: networks_path} }

                  = c.input :custom_tags, label: "Tags personnalisés<br><span class='help-block'>(séparés par des virgules)</span>".html_safe, :input_html => { :class => "span12 custom_tags_input", :placeholder =>"…", data: {autocomplete_source: customs_path} }


              .control-group
                %label.control-label #{t("simple_form.labels.venue.season")}
                .controls.swipeable
                  = venue_form.input_field :season_months, collection: (1..12).to_a, label_method: lambda {|index| t("date.abbr_month_names")[index.to_i]}, as: :check_boxes


                = venue_form.fields_for :structure do |s|
                  = s.fields_for :contact do |c|
                    = c.input :remark

            #schedulings.tab-pane

              = venue_form.fields_for :schedulings do |v|
                .nested-fields
                  = v.link_to_remove :title => "Supprimer cette programmation" do
                    %i.entypo.edi-minus2
                  = v.input :name

                  = v.input :external_show_buyer, collection: ["Cette structure", "Un autre organisateur de spectacles"], as: :radio_buttons, item_wrapper_class: "inline", input_html: {class: "external_show_buyer_radio"}

                  = v.input :show_buyer_name, input_html: {autocomplete:"off", class: "jq_autocomplete", data: {autocomplete_source: structures_path(type: "ShowBuyer")} }

                  = v.input :scheduler_name, input_html: {autocomplete:"off", class: "jq_autocomplete", data: {autocomplete_source: people_path} }
                  = v.input :contract_list, :collection => ["Co-realisation","Co-production","Cession","Location","Engagement","Autre"], :as => :check_boxes, item_wrapper_class:"inline"


                  = v.input :style_tags, label: "Styles programmés<br><span class='help-block'>(séparés par des virgules)</span>", :input_html => { :class => "span6 style_tags_input", :placeholder =>"Rock, humour…", data: {autocomplete_source: styles_path} }


                  %label.control-label Type d'artistes
                  = v.input :discovery, wrapper: :edgar_checkbox

                  = v.input :period, :collection => Scheduling::PERIOD_LIST.map(&:to_sym), as: :radio_buttons, item_wrapper_class: "inline"

                .control-group
                  %label.control-label #{t("simple_form.labels.schedulings.prospecting")}
                  .controls.swipeable
                    = v.input_field :prospecting_months, collection: (1..12).to_a, label_method: lambda {|index| t("date.abbr_month_names")[index.to_i]}, as: :check_boxes

                = v.input :remark

              .links
                = venue_form.link_to_add :schedulings, :title => 'Ajouter une programmation' do
                  %i.entypo.edi-plus2
                  Ajouter une programmation

            #rooms-infos.tab-pane
              .fields-group
                = venue_form.fields_for :rooms do |room|
                  .nested-fields
                    .control-group
                      %label.control-label
                        = room.input :name

                    .control-group
                      %label.control-label
                        Places
                      .inline-inputs
                        = room.input :seating, :wrapper => :append, :label => false do
                          = room.input_field :seating, :class => "input-mini"
                          = content_tag :span, "Assises", :class => "add-on"
                        = room.input :standing, :wrapper => :append, :label => false, :input_html => { :class => "inline" } do
                          = room.input_field :standing, :class => "input-mini"
                          = content_tag :span, "Debout", :class => "add-on"
                    .control-group
                      %label.control-label
                      = room.input :modular_space, wrapper: :edgar_checkbox

                    .control-group
                      %label.control-label
                        Dimensions plateau
                      .inline-inputs
                        = room.input :depth, :wrapper => :append, :label => false do
                          = room.input_field :depth, :class => "input-mini"
                          = content_tag :span, "P", :class => "add-on"
                        = room.input :width, :wrapper => :append, :label => false, :input_html => { :class => "inline" } do
                          = room.input_field :width, :class => "input-mini"
                          = content_tag :span, "L", :class => "add-on"
                        = room.input :height, :wrapper => :append, :label => false do
                          = room.input_field :height, :class => "input-mini"
                          = content_tag :span, "H", :class => "add-on"
                        %p.help-block (Profondeur / Largeur / Hauteur)

                    %label.control-label
                    = room.input :bar, wrapper: :edgar_checkbox


                    = room.link_to_remove :title => "Supprimer cette salle" do
                      %i.entypo.edi-minus2
                      #{t("simple_form.buttons.remove_room")}

                    %hr{style:'border-color:#C9C9D3'}

                .links
                  = venue_form.link_to_add :rooms, :title => t("simple_form.buttons.add_room") do
                    %i.entypo.edi-plus2
                    #{t("simple_form.buttons.add_room")}

    .form-actions
      = venue_form.button :submit, :class => "btn-primary btn-large btn-alert", data: {disable_with: "Chargement en cours..."}
      ou
      = link_to t(:cancel), @venue
